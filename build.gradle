import org.apache.tools.ant.filters.ReplaceTokens

plugins {
  id 'com.jfrog.bintray' version '0.6'
  id 'com.github.hierynomus.license' version '0.11.0'
}

group = 'com.github.rafael-brandao.gradle'
version = '0.1.0-SNAPSHOT'
description = 'Gradle plugin for using Google Protocol Buffers in your Gradle Scala project.'
status = { "$version".endsWith('-SNAPSHOT') ? 'integration' : 'release' }()

if (!project.hasProperty('scalaVersion')) {
  ext.scalaVersion = '2.10.4'
}

apply plugin: 'idea'
apply plugin: 'groovy'
apply plugin: 'scala'
apply from: script('scala-base-version')

ext {
  protobuffVersion = '2.5.0'
  scalabuffGroupId = 'net.sandrogrzicic'
  scalabuffCompilerArtifactId = "scalabuff-compiler_$scalaBase"
  scalabuffRuntimeArtifactId = "scalabuff-runtime_$scalaBase"
  scalabuffVersion = '1.3.8'

  artifactId = "${project.name}_$scalaBase"
  pluginId = "com.github.rafael-brandao.scalabuff_$scalaBase"
}

repositories {
  mavenCentral()
}

dependencies {
  compile gradleApi()
  compile localGroovy()
  compile "org.scala-lang:scala-library:$scalaVersion",
      "$scalabuffGroupId:$scalabuffCompilerArtifactId:$scalabuffVersion"
  testCompile "org.scalatest:scalatest_$scalaBase:2.2.3-SNAP2",
      "junit:junit:4.12-beta-2"
}

filterTokens(processTestResources, ['scalaBase': scalaBase])
filterTokens(processResources, [
    'protobuffDependency'       : "com.google.protobuf:protobuf-java:$protobuffVersion",
    'scalabuffRuntimeDependency': "$scalabuffGroupId:$scalabuffRuntimeArtifactId:$scalabuffVersion",
])

processResources.doLast {
  def tempPluginId = pluginId - "_$scalaBase"
  file("${sourceSets.main.output.resourcesDir}/META-INF/gradle-plugins/${tempPluginId}.properties").renameTo(
      file("${sourceSets.main.output.resourcesDir}/META-INF/gradle-plugins/${pluginId}.properties")
  )
}

test {
  jvmArgs '-Xms256m', '-Xmx512m'
  testLogging {
    exceptionFormat 'full'
  }
}

configure(tasks.withType(ScalaCompile)) {
  options.encoding = 'UTF-8'
  scalaCompileOptions.with {
    additionalParameters = ['-feature', '-Yinline-warnings']
    deprecation = true
    encoding = 'UTF-8'
    useAnt = false
  }
}

task sourcesJar(type: Jar) {
  description = 'An archive of the source code'
  classifier = 'sources'
  from sourceSets.main.allSource.srcDirs - sourceSets.main.resources.srcDirs + sourceSets.main.output.resourcesDir
}

configure(tasks.withType(Jar)) {
  baseName = artifactId
}

artifacts {
  archives sourcesJar
}

task wrapper(type: Wrapper) {
  gradleVersion = "2.1"
}

apply from: script('license')
apply from: script('publishing')

// Helper methods
File script(String name) {
  project.file("gradle/${name}.gradle")
}

void filterTokens(ProcessResources task, Map tokens) {
  configure(task) {
    filter ReplaceTokens, tokens: tokens.collectEntries { k, v -> [k, v.toString()] }
  }
}
